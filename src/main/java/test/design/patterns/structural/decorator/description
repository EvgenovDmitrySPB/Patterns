  
Шаблон: Декоратор(Decorator, Wrapper)
=======================================================================================================
Цель:

Динамическое добавление новых обязанностей объекту.

=======================================================================================================

Для чего используется:

Используется в качестве альтернативы порождению подклассов для расширения функциональности.

=======================================================================================================
Пример использования:

- динамическое и понятное клиентам добавления обязанностей объектам;
- реализация обязанностей, которые могут быть сняты с объекта;
- расширение класса путём порождения подклассов невозможно по каким-либо причинам.

=======================================================================================================
Комментарий: В основе лежит интерфейс с реализациями. Класс-декоратор агрегирует ссылку на интерфейс.
Все наследники агрегатора реализуют и содержат ссылку на интерфейс
Таким образом все наследники класса-агрегатора могут ссылаться друг на друга и добавлять свои методы